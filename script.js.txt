// ===== FIXED MULTI-PAGE PORTFOLIO SCRIPT =====

document.addEventListener('DOMContentLoaded', () => {
    console.log('✨ Portfolio Page Loaded!');

    // ===== THEME TOGGLE FUNCTIONALITY (FIXED) =====
    const themeToggle = document.getElementById('theme-toggle');
    const htmlElement = document.documentElement;
    
    if (!themeToggle) {
        console.warn('⚠️ Theme toggle button not found!');
        return;
    }

    // Use a cookie-like approach with document.cookie for persistence
    function getStoredTheme() {
        // Check if there's a theme preference in the page URL hash first
        if (window.location.hash === '#dark') {
            return 'dark';
        }
        if (window.location.hash === '#light') {
            return 'light';
        }
        
        // Check for theme in a simple way using document title as storage
        // This is a workaround since localStorage isn't available
        const savedTheme = getCookieValue('portfolio-theme');
        if (savedTheme) {
            return savedTheme;
        }
        
        // Default to light theme
        return 'light';
    }

    function storeTheme(theme) {
        // Store theme using a simple cookie-like method
        setCookieValue('portfolio-theme', theme);
        
        // Also update URL hash for immediate cross-page navigation
        const url = new URL(window.location);
        url.hash = theme;
        window.history.replaceState(null, '', url);
    }

    // Simple cookie-like storage using document properties
    function setCookieValue(name, value) {
        // Store in page meta for persistence
        let metaTheme = document.querySelector('meta[name="theme-preference"]');
        if (!metaTheme) {
            metaTheme = document.createElement('meta');
            metaTheme.name = 'theme-preference';
            document.head.appendChild(metaTheme);
        }
        metaTheme.content = value;
        
        // Also try to use a more persistent method
        try {
            document.cookie = `${name}=${value}; path=/; max-age=31536000; SameSite=Lax`;
        } catch (e) {
            console.log('Cookie storage not available, using meta tag only');
        }
    }

    function getCookieValue(name) {
        // First try to get from meta tag
        const metaTheme = document.querySelector('meta[name="theme-preference"]');
        if (metaTheme && metaTheme.content) {
            return metaTheme.content;
        }
        
        // Try to get from cookie
        try {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) {
                return parts.pop().split(';').shift();
            }
        } catch (e) {
            console.log('Cookie reading not available');
        }
        
        return null;
    }

    // Get initial theme
    let currentTheme = getStoredTheme();
    
    // Function to apply theme
    function applyTheme(theme) {
        console.log(`🎨 Applying theme: ${theme}`);
        
        if (theme === 'dark') {
            htmlElement.setAttribute('data-theme', 'dark');
            themeToggle.textContent = '☀️ Light';
            themeToggle.setAttribute('aria-label', 'Switch to light theme');
            document.body.style.setProperty('--current-theme', 'dark');
            console.log('🌙 Dark theme applied');
        } else {
            htmlElement.removeAttribute('data-theme');
            themeToggle.textContent = '🌙 Dark';
            themeToggle.setAttribute('aria-label', 'Switch to dark theme');
            document.body.style.setProperty('--current-theme', 'light');
            console.log('☀️ Light theme applied');
        }
        
        // Store the theme
        storeTheme(theme);
        
        // Force a style recalculation
        document.body.offsetHeight;
    }

    // Apply the stored theme immediately
    applyTheme(currentTheme);

    // Theme toggle event listener
    themeToggle.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('🎯 Theme toggle clicked!');
        
        // Toggle theme
        currentTheme = (currentTheme === 'dark') ? 'light' : 'dark';
        console.log('🔄 Switching to:', currentTheme);
        
        // Apply new theme
        applyTheme(currentTheme);
    });

    // Listen for hash changes (when user navigates with browser back/forward)
    window.addEventListener('hashchange', () => {
        const hashTheme = window.location.hash.replace('#', '');
        if ((hashTheme === 'dark' || hashTheme === 'light') && hashTheme !== currentTheme) {
            currentTheme = hashTheme;
            applyTheme(currentTheme);
        }
    });

    // ===== NAVIGATION FUNCTIONALITY =====
    const navLinks = document.querySelectorAll('.nav-links a');
    
    // Set active navigation based on current page
    function setActiveNav() {
        const currentPage = window.location.pathname.split('/').pop() || 'index.html';
        console.log('Current page:', currentPage);
        
        navLinks.forEach(link => {
            link.classList.remove('active');
            const linkHref = link.getAttribute('href');
            if (linkHref) {
                const cleanHref = linkHref.split('?')[0].split('#')[0];
                
                if (cleanHref === currentPage || 
                    (currentPage === '' && cleanHref === 'index.html') ||
                    (currentPage === 'index.html' && cleanHref === 'index.html')) {
                    link.classList.add('active');
                    console.log('Active nav set for:', cleanHref);
                }
            }
        });
    }

    // Set active nav on page load
    setActiveNav();

    // Preserve theme when navigating to other pages
    navLinks.forEach(link => {
        link.addEventListener('click', (e) => {
            // Get the current theme
            const theme = htmlElement.hasAttribute('data-theme') ? 'dark' : 'light';
            console.log('Navigation clicked, preserving theme:', theme);
            
            // Add theme to the target URL
            const href = link.getAttribute('href');
            if (href && !href.startsWith('http') && !href.includes('#')) {
                const newUrl = href + '#' + theme;
                link.setAttribute('href', newUrl);
                console.log('Updated navigation link:', newUrl);
            }
        });
    });

    // ===== ENHANCED ANIMATIONS =====
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach((card) => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-8px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });

    // Page transition animation
    const body = document.body;
    body.style.opacity = '0';
    body.style.transform = 'translateY(20px)';
    body.style.transition = 'all 0.5s ease';
    
    setTimeout(() => {
        body.style.opacity = '1';
        body.style.transform = 'translateY(0)';
        console.log('✨ Page transition completed');
    }, 100);

    // Skill items animation (if present on page)
    const skillItems = document.querySelectorAll('.skill-item');
    if (skillItems.length > 0) {
        skillItems.forEach((item, index) => {
            item.style.animationDelay = `${index * 0.1}s`;
            item.style.animation = 'fadeInUp 0.6s ease-out forwards';
        });
    }

    // ===== ENHANCED HOVER EFFECTS =====
    // Button hover effects
    const buttons = document.querySelectorAll('.cta-button, .project-link, .theme-toggle');
    buttons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
        });
    });

    // Profile image hover effect (if present)
    const profileImg = document.querySelector('.profile-img');
    if (profileImg) {
        profileImg.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.05) rotate(2deg)';
        });
        
        profileImg.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1) rotate(0deg)';
        });
    }

    // ===== ACCESSIBILITY IMPROVEMENTS =====
    // Add keyboard navigation for theme toggle
    themeToggle.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            themeToggle.click();
        }
    });

    // Add focus indicators
    const interactiveElements = document.querySelectorAll('button, a, .nav-links a');
    interactiveElements.forEach(element => {
        element.addEventListener('focus', function() {
            this.style.outline = '2px solid var(--primary-color)';
            this.style.outlineOffset = '2px';
        });
        
        element.addEventListener('blur', function() {
            this.style.outline = 'none';
        });
    });

    console.log('%c🎨 Multi-Page Portfolio Loaded Successfully! 🎨', 
        'color: #9966cc; font-size: 16px; font-weight: bold;');
        
    console.log('Current theme on load:', currentTheme);
    console.log('Page loaded:', window.location.pathname.split('/').pop() || 'index.html');
    
    // Debug: Check if CSS variables are working
    const computedStyle = getComputedStyle(document.documentElement);
    console.log('CSS --text-color:', computedStyle.getPropertyValue('--text-color'));
    console.log('data-theme attribute:', htmlElement.getAttribute('data-theme'));
});
